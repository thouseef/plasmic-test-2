// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: psCXYX3gjakvq2zZg1EteZ
// Component: lYgLXK9i21Tl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: g3ZffYhwzf2j/component
import Testimonial from "../../Testimonial"; // plasmic-import: 2wficFVLABUF/component
import CtaBottom from "../../CtaBottom"; // plasmic-import: E6da7OVPe4rc/component
import Footer from "../../Footer"; // plasmic-import: LTw2TEFnvRb-/component

import { useScreenVariants as useScreenVariantshvhwDwBsRjsA } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: HvhwDwBSRjsA/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: psCXYX3gjakvq2zZg1EteZ/projectcss
import sty from "./PlasmicStory.module.css"; // plasmic-import: lYgLXK9i21Tl/css

import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: au1wrGHIGpJl/icon
import LoactionVectorSvgIcon from "./icons/PlasmicIcon__LoactionVectorSvg"; // plasmic-import: 4Zic9e6GveIO/icon
import PhoneVectorSvgIcon from "./icons/PlasmicIcon__PhoneVectorSvg"; // plasmic-import: TBAhtAcydZ6h/icon
import EmailVectorSvgIcon from "./icons/PlasmicIcon__EmailVectorSvg"; // plasmic-import: H0IW4QarVu26/icon

createPlasmicElementProxy;

export type PlasmicStory__VariantMembers = {};
export type PlasmicStory__VariantsArgs = {};
type VariantPropType = keyof PlasmicStory__VariantsArgs;
export const PlasmicStory__VariantProps = new Array<VariantPropType>();

export type PlasmicStory__ArgsType = {};
type ArgPropType = keyof PlasmicStory__ArgsType;
export const PlasmicStory__ArgProps = new Array<ArgPropType>();

export type PlasmicStory__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  pageBanerSection?: Flex__<"div">;
  h1?: Flex__<"h1">;
  section?: Flex__<"section">;
  foreground?: Flex__<"div">;
  h2?: Flex__<"h2">;
  ctaBottom?: Flex__<typeof CtaBottom>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultStoryProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStory__RenderFunc(props: {
  variants: PlasmicStory__VariantsArgs;
  args: PlasmicStory__ArgsType;
  overrides: PlasmicStory__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshvhwDwBsRjsA()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"pageBanerSection"}
            data-plasmic-override={overrides.pageBanerSection}
            className={classNames(projectcss.all, sty.pageBanerSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3TUb8)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Story"}
              </h1>
            </div>
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uygU)}>
              <div className={classNames(projectcss.all, sty.freeBox__eiWp2)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jjbMo)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"foreground"}
                    data-plasmic-override={overrides.foreground}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vBekM)}
                    >
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {"Story heading"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fuhjA
                        )}
                      >
                        {
                          "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi  arturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo  empor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo  empor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tZgNi
                        )}
                      >
                        {
                          "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi  arturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo  empor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies. Vitae sed sem a justo mauris potenti a primis vivamus justo  empor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3W5C2
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2Balw
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__ksEnY
                          )}
                        >
                          {"Built on capability"}
                        </h3>
                        <Icon16Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5KDSu
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wCboz
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__zhbQ
                          )}
                        >
                          {"Highly energetic"}
                        </h3>
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__n47L7)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__suXRn
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__klvj5
                          )}
                        >
                          {"100% transparency and accountability"}
                        </h3>
                        <Icon16Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4Xp4U
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__toZLn
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__hHvlT
                          )}
                        >
                          {"Refreshing clarity"}
                        </h3>
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__kkLNp)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cBjsw
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__diZx
                          )}
                        >
                          {"Modern results"}
                        </h3>
                        <Icon16Icon
                          className={classNames(projectcss.all, sty.svg__vrHa6)}
                          role={"img"}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qbbQt
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z7Bdt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uajqA
                            )}
                          >
                            <LoactionVectorSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ukGa
                              )}
                              role={"img"}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m9GCr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__emmdi
                              )}
                            >
                              {"121 state lorem state"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lLxAs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__snzbp
                            )}
                          >
                            <PhoneVectorSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__noVtR
                              )}
                              role={"img"}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z4WJj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__haXAo
                              )}
                            >
                              {"888888885588"}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lyYmp
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mZh9
                            )}
                          >
                            <EmailVectorSvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xrDzt
                              )}
                              role={"img"}
                            />
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3Mf0A
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8WNm
                              )}
                            >
                              {"Info@gmail.com"}
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__zKqzh)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0UTek)}
            >
              <Testimonial
                className={classNames(
                  "__wab_instance",
                  sty.testimonial___2K7Vm
                )}
                slot={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__oxLHp)}
                      displayHeight={"64px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"64px"}
                      src={{
                        src: "/plasmic/professional_services/images/woman32879561920Jpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1280,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g0R0Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xrae5
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__jeDtd
                          )}
                        >
                          {"Lorem doi"}
                        </h5>
                      </div>
                    </Stack__>
                  </React.Fragment>
                }
              />

              <Testimonial
                className={classNames("__wab_instance", sty.testimonial__bexkl)}
                slot={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ztjB)}
                      displayHeight={"64px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"64px"}
                      src={{
                        src: "/plasmic/professional_services/images/people31046351920Jpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1281,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__d79Y5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tHjIs
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__m8RN4
                          )}
                        >
                          {"Lorem doi"}
                        </h5>
                      </div>
                    </Stack__>
                  </React.Fragment>
                }
              />

              <Testimonial
                className={classNames("__wab_instance", sty.testimonial__ge5K)}
                slot={
                  <React.Fragment>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ebCkZ)}
                      displayHeight={"64px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"64px"}
                      src={{
                        src: "/plasmic/professional_services/images/girls18285391920Jpg.jpg",
                        fullWidth: 1920,
                        fullHeight: 1280,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wgi2G)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fextL
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__h7Sym
                          )}
                        >
                          {"Lorem doi"}
                        </h5>
                      </div>
                    </Stack__>
                  </React.Fragment>
                }
              />
            </Stack__>
          </div>
          <CtaBottom
            data-plasmic-name={"ctaBottom"}
            data-plasmic-override={overrides.ctaBottom}
            className={classNames("__wab_instance", sty.ctaBottom)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "pageBanerSection",
    "h1",
    "section",
    "foreground",
    "h2",
    "ctaBottom",
    "footer"
  ],
  header: ["header"],
  pageBanerSection: ["pageBanerSection", "h1"],
  h1: ["h1"],
  section: ["section", "foreground", "h2"],
  foreground: ["foreground", "h2"],
  h2: ["h2"],
  ctaBottom: ["ctaBottom"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  pageBanerSection: "div";
  h1: "h1";
  section: "section";
  foreground: "div";
  h2: "h2";
  ctaBottom: typeof CtaBottom;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStory__VariantsArgs;
    args?: PlasmicStory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStory__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStory__ArgProps,
          internalVariantPropNames: PlasmicStory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStory";
  } else {
    func.displayName = `PlasmicStory.${nodeName}`;
  }
  return func;
}

export const PlasmicStory = Object.assign(
  // Top-level PlasmicStory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    pageBanerSection: makeNodeComponent("pageBanerSection"),
    h1: makeNodeComponent("h1"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    h2: makeNodeComponent("h2"),
    ctaBottom: makeNodeComponent("ctaBottom"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicStory
    internalVariantProps: PlasmicStory__VariantProps,
    internalArgProps: PlasmicStory__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStory;
/* prettier-ignore-end */
